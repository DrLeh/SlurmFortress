using Microsoft.Extensions.DependencyInjection;
using Refit;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.Net.Http.Headers;

namespace DLeh.Services.SlurmFortress;

public static class DependencyInjection
{
    private static void AddSlurmFortressBase(IServiceCollection services)
    {
        services.ConfigureOptions<SlurmFortressOptions>("");

        //configure more client endpoints here
        services.AddScoped<ISlurmFortressClient, SlurmFortressClient>();
        services.AddScoped<ISlurmsClient, SlurmsClient>();
    }

    /// <summary>
    /// Add ability to connect to SlurmFortress via injecting an <see cref="ISlurmsClient"/>.
    /// </summary>
    public static void AddSlurmFortressApi(this IServiceCollection services) => services.AddSlurmFortress<NullHandler>();

    /// <summary>
    /// Add ability to connect to Vesta via injecting an <see cref="ISlurmsClient"/>.
    /// </summary>
    public static void AddSlurmFortress<THandler>(this IServiceCollection services)
            where THandler : DelegatingHandler
    {
        AddSlurmFortressBase(services);
        var refitSettings = GetRefitSettings();

        void ConfigureClient<T>()
            where T : class
        {
            var builder = services
                .AddRefitClient<T>(refitSettings)
                .ConfigureHttpClient(ConfigureHttpClient)
                //.AddHttpMessageHandler<AuthHeaderHandler>()
                ;

            if (typeof(THandler) != typeof(NullHandler))
                builder.AddHttpMessageHandler<THandler>();
        }

        //configure more apis here
        ConfigureClient<ISlurmsApi>();
    }


    /// <summary>
    /// Add ability to connect to SlurmFortress with a particular <see cref="HttpClient"/> rather than the one
    /// generated by <see cref="IHttpClientFactory"/>.
    /// </summary>
    public static void AddSlurmFortress(this IServiceCollection services, HttpClient client)
    {
        AddSlurmFortressBase(services);

        services.AddSingleton(RestService.For<ISlurmsApi>(client));
    }

    private static void ConfigureHttpClient(IServiceProvider sp, HttpClient client)
    {
        var config = sp.GetRequiredService<SlurmFortressOptions>();
        if (config.BaseUrl == null)
            throw new InvalidOperationException("SlurmFortress:BaseUrl must be configured");
        client.BaseAddress = new Uri(config.BaseUrl);

        //uncomment if your app needs authorization and uses standard ASI auth

        //var provider = sp.GetRequiredService<IAsiTokenProvider>();
        //var token = provider.GetToken();
        //client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
    }

    private static RefitSettings GetRefitSettings()
    {
        var jsonSettings = new JsonSerializerSettings
        {
        };
        jsonSettings.Converters.Add(new StringEnumConverter());
        var serializer = new NewtonsoftJsonContentSerializer(jsonSettings);

        var refitSettings = new RefitSettings(serializer)
        {
        };
        return refitSettings;
    }

    internal class NullHandler : DelegatingHandler { }
}
